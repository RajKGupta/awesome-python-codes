from collections import defaultdict


# This class represents a directed graph using adjacency list representation
class Graph(object):

    def __init__(self, vertices):
        self.V = vertices  # No. of vertices
        self.graph = defaultdict(list)  # default dictionary to store graph

    # function to add an edge to graph
    def addEdge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    # Use BFS to check path between s and d
    def bfs(self, s):
        # Mark all the vertices as not visited
        visited = [False] * (self.V)
        # Create a queue for BFS
        queue = []
        distance = [-1]*self.V
        distance[s]=0
        # Mark the source node as visited and enqueue it
        queue.append(s)
        visited[s] = True

        while queue:

            n = queue.pop(0)
            for i in self.graph[n]:
                if visited[i] == False:
                    queue.append(i)
                    visited[i] = True
                    distance[i] = distance[n]+1
        # If BFS is complete without visited d
        return distance


# Create a graph given in the above diagram


a = map(int, raw_input().split())
n = a[0]
m = a[1]
g = Graph(n)
for i in range(m):
    temp = map(int, raw_input().split())
    g.addEdge(temp[0], temp[1])   # make it temp[0]-1,temp[1]-1 if one based indexed tree

l = g.bfs(0)
print l

faf = l[0]
pos=0
for i in xrange(1,n):
    if l[i]>faf:
        pos = i
        faf = l[i]
print pos
print g.bfs(pos)
