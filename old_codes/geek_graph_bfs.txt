from collections import defaultdict
 
#This class represents a directed graph using adjacency list representation
class Graph(object):
 
    def __init__(self,vertices):
        self.V= vertices #No. of vertices
        self.graph = defaultdict(list) # default dictionary to store graph
 
    # function to add an edge to graph
    def addEdge(self,u,v):
    	self.graph[u].append(v)
        self.graph[v].append(u)
 
    # Use BFS to check path between s and d
    def isReachable(self, s, d):
        # Mark all the vertices as not visited
        visited =[False]*(self.V)
        # Create a queue for BFS
        queue=[]
 
        # Mark the source node as visited and enqueue it
        queue.append(s)
        visited[s] = True
 
        while queue:
 
            #Dequeue a vertex from queue 
            n = queue.pop(0)
 
            # If this adjacent node is the destination node,
            # then return true
            if n == d:
                return True
 
            #  Else, continue to do BFS
            for i in self.graph[n]:
                if visited[i] == False:
                    queue.append(i)
                    visited[i] = True
        # If BFS is complete without visited d
        return False
 
# Create a graph given in the above diagram
 
 
test = int(raw_input())
while test>0:
	test-=1
	a = map(int,raw_input().split())
	n = a[0]
	m=a[1]
	g = Graph(n)
	for i in range(m):
		temp = map(int,raw_input().split())
		g.addEdge(temp[0],temp[1])
	print g.graph
	q = int(raw_input())
	for i in range(q):
		e = map(int,raw_input().split())
		if e[0]==e[1]:
			print "YO"
		else:
			if g.isReachable(e[0],e[1]):
				print "YO"
			else:
				print "NO"